name: CMake

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  BUILD_VERSION_TEXT: build-msys2-${{ github.run_number }}
  BUILD_DIR_DBG: build-debug
  BUILD_DIR_REL: build-release
  PACK_DIR: build-msys2  
  
jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    # Setting default options - default shell in this case in which all run commands will execute.
    defaults:
      run:
        shell: msys2 {0}

    steps:
    
    - name: PRINT ENV
      if: false
      run: |
           echo $PATH
           echo $ENV
           echo $PATH
           ls C:/
           ls C:/msys64/
           ls C:/msys64/mingw64/
           ls C:/msys64/mingw64/bin/   
           
    - name: CHECKOUT
      uses: actions/checkout@v3

    #
    # Starting from https://github.com/xterminal86/nrogue/actions/runs/7036707213 MSVC build broke for some fucking reason,
    # so I switched it over to MSYS2 which was quite a Google journey by itself to make build working here.
    #
    # How to set up environment:              https://www.msys2.org/docs/cmake/
    # List of available packages to install:  https://packages.msys2.org/package/?repo=ucrt64
    #
    - name: SET UP MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: UCRT64
        update: true
        install: |
                 git 
                 mingw-w64-ucrt-x86_64-gcc 
                 mingw-w64-ucrt-x86_64-cmake 
                 mingw-w64-ucrt-x86_64-ninja 
                 mingw-w64-ucrt-x86_64-SDL2
                 mingw-w64-ucrt-x86_64-7zip

    - name: PRINT MSYS2
      if: false
      run: |
           echo "--- ROOT ---"
           ls /
           echo "--- /ucrt64 ---"
           ls /ucrt64
           echo "--- /ucrt64/bin ---"
           ls /ucrt64/bin
           echo "--- /ucrt64/lib ---"
           ls /ucrt64/lib       
           echo "--- /ucrt64/include ---"
           ls /ucrt64/include
           echo "--- /ucrt64/include/SDL2 ---"
           ls /ucrt64/include/SDL2
           
    # --------------------------------------------------------------------------

    - name: CONFIGURE CMake (Release)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # NOTE: MSYS2 has bullshit problems with handling slashes, so put everything related in '' quotes.
      run: >          
          cmake 
          -B '${{github.workspace}}/${{ env.BUILD_DIR_REL }}'
          -DBUILD_VERSION_TEXT=${{ env.BUILD_VERSION_TEXT }} 
          -G Ninja
          -DCMAKE_BUILD_TYPE=Release
          -DBUILD_TESTS=OFF 
          -DUSE_SDL=ON 
          -DSDL2_DIR='/ucrt64/lib/cmake/SDL2/'
          -DSDL2_INCLUDE_DIR='/ucrt64/include/'
          -DSDL2MAIN_LIBRARY='/ucrt64/lib/libSDL2main.a'
          -DSDL2_LIBRARY='/ucrt64/lib/libSDL2.dll.a'

    - name: BUILD (Release)      
      # Build your program with the given configuration
      run: |
           cmake --build '${{github.workspace}}/${{ env.BUILD_DIR_REL }}' --config Release

    # --------------------------------------------------------------------------

    - name: CONFIGURE CMake (Debug)
      if: false
      run: >          
          cmake 
          -B '${{github.workspace}}/${{ env.BUILD_DIR_DBG }}'
          -G Ninja
          -DBUILD_VERSION_TEXT=${{ env.BUILD_VERSION_TEXT }} 
          -DCMAKE_BUILD_TYPE=Debug
          -DBUILD_TESTS=OFF 
          -DUSE_SDL=ON 
          -DSDL2_DIR='/ucrt64/lib/cmake/SDL2/'
          -DSDL2_INCLUDE_DIR='/ucrt64/include/'
          -DSDL2MAIN_LIBRARY='/ucrt64/lib/libSDL2main.a'
          -DSDL2_LIBRARY='/ucrt64/lib/libSDL2.dll.a'

    - name: BUILD (Debug)
      if: false
      run: |
           cmake --build '${{github.workspace}}/${{ env.BUILD_DIR_DBG }}' --config Debug

    # --------------------------------------------------------------------------

    - name: AFTER BUILD
      run: |
           echo "AFTER BUILD:"
           echo "--- ROOT ---"
           ls
           echo "--- RELEASE DIR ---"
           ls ${{ env.BUILD_DIR_REL }}

    # --------------------------------------------------------------------------
    #
    # It seems static linking of libgcc_seh and libstdc++ works, 
    # so no need to copy these.
    #
    - name: PREPARE ARTIFACTS (Release)
      run: |
           mkdir '${{ env.PACK_DIR }}'
           mkdir '${{ env.PACK_DIR }}/nrogue'
           cp '${{github.workspace}}/${{ env.BUILD_DIR_REL }}/nrogue.exe' '${{ env.PACK_DIR }}/nrogue/'
           cp '/ucrt64/bin/SDL2.dll' '${{ env.PACK_DIR }}/nrogue/'
           cp '${{github.workspace}}/config-template.txt' '${{ env.PACK_DIR }}/nrogue/'           

    - name: PREPARE ARTIFACTS (Debug)
      if: false
      run: |
           mkdir '${{ env.PACK_DIR }}/nrogue-dbg'
           cp '${{github.workspace}}/${{ env.BUILD_DIR_DBG }}/nrogue.exe' '${{ env.PACK_DIR }}/nrogue-dbg/'
           cp '/ucrt64/bin/SDL2.dll' '${{ env.PACK_DIR }}/nrogue-dbg/'
           cp '${{github.workspace}}/config-template.txt' '${{ env.PACK_DIR }}/nrogue-dbg/'           
           
    - name: PACK ARTIFACTS
      run: |
           cd ${{ env.PACK_DIR }}
           7z a -tzip build-latest.zip nrogue/
           mv build-latest.zip ../

    # --------------------------------------------------------------------------

    - name: DEBUG INFO
      run: |
           echo "FINISHED ARTIFACTS PACKING:"
           echo "--- ROOT ---"
           ls
           echo "--- PACK DIR ---"
           ls ${{ env.PACK_DIR }}           

    - name: UPLOAD ARTIFACT
      uses: actions/upload-artifact@v3.0.0
      with:        
        name: build-latest
        path: ${{github.workspace}}/build-latest.zip
        retention-days: 1
                  
    - name: CHECK IF RELEASE EXISTS
      id: checkIfLatestReleaseExists
      uses: mukunku/tag-exists-action@v1.0.0
      with:
          tag: "build-latest"
      env:
          GITHUB_TOKEN: ${{ github.token }}    
     
    - name: DELETE OLD RELEASE
      if: ${{ steps.checkIfLatestReleaseExists.outputs.exists }} == "true"      
      uses: dev-drprasad/delete-tag-and-release@v0.2.1
      with:
          delete_release: true
          tag_name: build-latest
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: CREATE 'build-latest' RELEASE
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: build-latest
          release_name: build-latest
          body: |
                Builds automatically on every new commit.
                
                May be unstable and / or broken.  
          draft: false
          prerelease: false          
    
# ==============================================================================

  publish:
    needs: build
    runs-on: windows-latest    
    steps:
      - uses: actions/checkout@v3
    
      - name: DOWNLOAD ARTIFACT
        uses: actions/download-artifact@v3.0.0
        with:          
          name: build-latest          

      - name: GET 'build-latest' RELEASE INFO
        id: latest-release-info
        uses: cardinalby/git-get-release-action@v1
        env:
            GITHUB_TOKEN: ${{ github.token }}
        with:
            tag: build-latest

      - name: UPLOAD LATEST RELEASE ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.latest-release-info.outputs.upload_url }}
          asset_path: ${{github.workspace}}/build-latest.zip
          asset_name: build-msys2-${{ github.run_number }}.zip
          asset_content_type: application/zip

  
